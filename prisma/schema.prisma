// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String  @unique @default(uuid())
  name      String
  email     String  @unique
  password  String
  contact   String  @default("")
  companyId Int?
  addressId Int?
  orderId   Int?
  roleId    Int?
  wage      Int?
  obs       String?

  codeEmployee Int?
  Company      Companys?   @relation(fields: [companyId], references: [id])
  address      Address?    @relation(fields: [addressId], references: [id])
  role         Role?       @relation(fields: [roleId], references: [id])
  Order        Order[]
  Favorites    Favorites[]

  @@map("accounts")
}

model Address {
  id          Int       @unique @default(autoincrement())
  lat         String
  lng         String
  AccountId   String
  street      String
  houseNumber Int
  district    String
  obs         String?
  orderId     Int?
  Account     Account[]

  @@map("addresses")
}

model Companys {
  id           Int        @unique @default(autoincrement())
  companyCode  String     @unique
  codeEmployee Int        @unique
  companyName  String
  access       String
  lat          String
  lng          String
  street       String
  houseNumber  Int
  district     String
  Account      Account[]
  Role         Role[] // Alterado de Roles para Role
  Category     Category[]
  Sizes        Sizes[]

  @@map("companies")
}

model Products {
  id                 Int                  @unique @default(autoincrement())
  companyId          Int
  name               String
  value              Int
  image              String
  relationRequest    RelationRequest[]
  Order              Order[]
  Favorites          Favorites[]
  productsByCategory ProductsByCategory[]
  ProductsBySizes    ProductsBySizes[]

  @@map("products")
}

model Sizes {
  id              Int               @unique @default(autoincrement())
  name            String
  companyId       Int
  company         Companys?         @relation(fields: [companyId], references: [id])
  ProductsBySizes ProductsBySizes[]

  @@map("sizes")
}

model Category {
  id                 Int                  @unique @default(autoincrement())
  name               String
  companyId          Int
  company            Companys?            @relation(fields: [companyId], references: [id])
  productsByCategory ProductsByCategory[]

  @@map("categories")
}

model Favorites {
  id        Int      @unique @default(autoincrement())
  productId Int
  accountId String
  createdAt DateTime @default(now())

  product Products @relation(fields: [productId], references: [id])
  account Account  @relation(fields: [accountId], references: [id])

  @@map("favorites")
}

model ProductsByCategory {
  productId  Int
  categoryId Int
  Product    Products? @relation(fields: [productId], references: [id])
  Category   Category? @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model ProductsBySizes {
  productId Int
  sizeId    Int
  Product   Products? @relation(fields: [productId], references: [id])
  Size      Sizes?    @relation(fields: [sizeId], references: [id])

  @@id([productId, sizeId])
}

model Order {
  id        Int      @unique @default(autoincrement())
  companyId Int
  priority  Boolean
  status    String
  date      DateTime
  obs       String?
  userId    String

  sizeId    Int?
  productId Int?

  account         Account           @relation(fields: [userId], references: [id])
  Products        Products?         @relation(fields: [productId], references: [id])
  relationRequest RelationRequest[]

  @@map("orders")
}

model Role {
  id        Int       @unique @default(autoincrement())
  companyId Int
  role      String
  userId    String
  Account   Account[]
  Companys  Companys? @relation(fields: [companyId], references: [id])

  @@map("roles")
}

model RelationRequest {
  id        Int @unique @default(autoincrement())
  productId Int
  quantity  Int
  orderId   Int

  order   Order    @relation(fields: [orderId], references: [id])
  product Products @relation(fields: [productId], references: [id])

  @@map("relation_requests")
}

model Stock {
  id        Int    @unique @default(autoincrement())
  companyId Int
  name      String
  unidade   String
  unitPrice Int
  quantity  Int

  @@map("stocks")
}
